(()=>{"use strict";var t={265:function(t,n,e){var a,o=this&&this.__createBinding||(Object.create?function(t,n,e,a){void 0===a&&(a=e);var o=Object.getOwnPropertyDescriptor(n,e);o&&!("get"in o?!n.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return n[e]}}),Object.defineProperty(t,a,o)}:function(t,n,e,a){void 0===a&&(a=e),t[a]=n[e]}),i=this&&this.__setModuleDefault||(Object.create?function(t,n){Object.defineProperty(t,"default",{enumerable:!0,value:n})}:function(t,n){t.default=n}),s=this&&this.__importStar||(a=function(t){return a=Object.getOwnPropertyNames||function(t){var n=[];for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[n.length]=e);return n},a(t)},function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e=a(t),s=0;s<e.length;s++)"default"!==e[s]&&o(n,t,e[s]);return i(n,t),n});Object.defineProperty(n,"__esModule",{value:!0}),n.activate=function(t){const n=r.window.createStatusBarItem(r.StatusBarAlignment.Right,1e3);n.text="$(git-commit) Git Stats",n.tooltip="Click to view your Git contribution statistics",n.command="code-activity-tracker.showStats";const e=()=>{r.workspace.workspaceFolders?n.show():n.hide()};e(),t.subscriptions.push(r.workspace.onDidChangeWorkspaceFolders((()=>e()))),t.subscriptions.push(n);let a=r.commands.registerCommand("code-activity-tracker.showStats",(async()=>{const n=r.workspace.workspaceFolders;if(!n)return void r.window.showErrorMessage("Please open a workspace with a Git repository");const e=n[0].uri.fsPath,a=(0,l.simpleGit)(e);try{if(!await a.checkIsRepo())return void r.window.showErrorMessage("This workspace is not a Git repository");const n=new c.GitContributionAnalyzer(a),e=await n.getContributionStats(),o=new d.ContributionVisualization(t,n);r.window.withProgress({location:r.ProgressLocation.Notification,title:"Analyzing Git history...",cancellable:!1},(async t=>{await o.show(e)})),o.onTimeRangeChange((async t=>{r.window.withProgress({location:r.ProgressLocation.Notification,title:"Updating statistics...",cancellable:!1},(async e=>{const a=await n.getContributionStats(t);await o.updateStats(a)}))}))}catch(t){r.window.showErrorMessage("Error analyzing Git history: "+t)}}));t.subscriptions.push(a)};const r=s(e(398)),l=e(807),c=e(962),d=e(944)},962:function(t,n,e){var a,o=this&&this.__createBinding||(Object.create?function(t,n,e,a){void 0===a&&(a=e);var o=Object.getOwnPropertyDescriptor(n,e);o&&!("get"in o?!n.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return n[e]}}),Object.defineProperty(t,a,o)}:function(t,n,e,a){void 0===a&&(a=e),t[a]=n[e]}),i=this&&this.__setModuleDefault||(Object.create?function(t,n){Object.defineProperty(t,"default",{enumerable:!0,value:n})}:function(t,n){t.default=n}),s=this&&this.__importStar||(a=function(t){return a=Object.getOwnPropertyNames||function(t){var n=[];for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[n.length]=e);return n},a(t)},function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e=a(t),s=0;s<e.length;s++)"default"!==e[s]&&o(n,t,e[s]);return i(n,t),n}),r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0}),n.GitContributionAnalyzer=void 0;const l=r(e(807)),c=r(e(716)),d=s(e(896)),u=s(e(928));n.GitContributionAnalyzer=class{constructor(t,n={}){this.repoPath="",this.git=t,this.config={excludePatterns:["**/*.pb.go","**/*.pb.js","**/*.pb.ts","**/*_pb2.py","**/*_pb3.py","**/generated/**","**/*.pb.cs",...n.excludePatterns||[]]}}isProtobufGeneratedFile(t){if(console.log(`\nChecking file: ${t}`),t.includes("Protos/")||t.includes("Protos\\")){if(console.log(`File is in Protos directory: ${t}`),t.toLowerCase().endsWith(".cs"))try{console.log(`Reading C# file content: ${t}`);const n=d.readFileSync(t,"utf8").split("\n").slice(0,5).join("\n");return console.log("First few lines:",n),!0}catch(n){return console.error(`Error reading C# file ${t}:`,n),!0}return!0}if(!d.existsSync(t))return console.log(`File does not exist: ${t}`),!1;if(t.toLowerCase().endsWith(".cs"))try{console.log(`Reading C# file content: ${t}`);const n=d.readFileSync(t,"utf8").split("\n").slice(0,20).join("\n"),e=["Generated by the protocol buffer compiler","<auto-generated>","DO NOT EDIT","using pb = global::Google.Protobuf","using pbc = global::Google.Protobuf.Collections","namespace Google.Protobuf","#pragma warning disable"].some((t=>n.includes(t)));return e&&(console.log(`Found protobuf generated C# file: ${t}`),console.log("First few lines:",n)),e}catch(n){return console.error(`Error reading C# file ${t}:`,n),!1}return this.config.excludePatterns.some((n=>{const e=n.replace(/\./g,"\\.").replace(/\*\*/g,".*").replace(/\*/g,"[^/]*"),a=new RegExp(e).test(t);return a&&console.log(`File matches exclude pattern ${n}: ${t}`),a}))}shouldIncludeFile(t){if(t.includes("Protos/")||t.includes("Protos\\"))return console.log(`Excluding file from Protos directory: ${t}`),!1;const n=u.join(this.repoPath,t),e=this.isProtobufGeneratedFile(n);return e&&console.log(`Excluding generated file: ${t}`),!e}async getContributionStats(t=7,n,e){let a,o;console.log(`Starting contribution analysis for the last ${t} days`),console.log(`Repository path: ${this.repoPath}`),n&&e?(o=(0,c.default)(n).startOf("day"),a=(0,c.default)(e).endOf("day")):(a=(0,c.default)().add(1,"days").startOf("day"),o=(0,c.default)().subtract(t-1,"days").startOf("day")),console.log(`Analyzing commits from ${o.format("YYYY-MM-DD HH:mm:ss")} to ${a.format("YYYY-MM-DD HH:mm:ss")}`);try{const t=await this.git.log(["--all","--no-merges","--numstat","--date=iso-strict","--pretty=format:commit %H%n%an%n%aI%n%s%n","--since",o.format("YYYY-MM-DD HH:mm:ss"),"--until",a.format("YYYY-MM-DD HH:mm:ss"),"--invert-grep","--grep=^WIP","--grep=^stash","--grep=^\\[STASH\\]","--grep=^\\[stash\\]"]);if(!t||!t.all||0===t.all.length)return console.log("No commits found in the specified date range"),{};console.log(`Found ${t.all.length} commits in the date range`);const n={},e=t.all[0].hash.split("\ncommit ");for(const t of e){if(!t.trim())continue;const e=t.split("\n");if(e.length<4)continue;const i=e[0].trim(),s=e[1].trim(),r=e[2].trim(),l=e[3].trim();if(s.toLowerCase().includes("stash")||l.toLowerCase().includes("stash")||l.startsWith("WIP")||l.startsWith("[STASH]")||l.startsWith("[stash]"))continue;const d=(0,c.default)(r);if(!d.isValid())continue;n[s]||(n[s]={author:s,email:"",startDate:o,endDate:a,totalCommits:0,totalInsertions:0,totalDeletions:0,totalFiles:0,dailyStats:{}});const u=d.format("YYYY-MM-DD");n[s].dailyStats[u]||(n[s].dailyStats[u]={commits:0,insertions:0,deletions:0,files:0}),n[s].totalCommits++,n[s].dailyStats[u].commits++;for(let t=4;t<e.length;t++){const a=e[t].trim();if(!a)continue;const[o,r,l]=a.split("\t");if(!l)continue;if(!this.shouldIncludeFile(l)){console.log(`Skipping generated file in commit ${i}: ${l}`);continue}const c="-"===o?0:parseInt(o)||0,d="-"===r?0:parseInt(r)||0;n[s].totalInsertions+=c,n[s].totalDeletions+=d,n[s].totalFiles++,n[s].dailyStats[u].insertions+=c,n[s].dailyStats[u].deletions+=d,n[s].dailyStats[u].files++}}return n}catch(t){throw console.error("Error analyzing git log:",t),t}}async analyzeRepository(t,n,e){this.repoPath=t;const a=(0,l.default)(t),o={};try{const t=(await a.raw(["log","--all","--no-merges","--numstat","--format=commit:%H%nauthor:%aN%nemail:%aE%ndate:%aI"])).split("\ncommit:").filter((t=>t.trim()));for(const a of t){const t=a.trim().split("\n");let i="",s="",r="",l=0,d=0,u=0;for(const n of t)if(n.startsWith("author:"))i=n.substring(7).trim();else if(n.startsWith("email:"))s=n.substring(6).trim();else if(n.startsWith("date:"))r=n.substring(5).trim();else if(n.trim()&&!n.startsWith("commit:")){const t=n.split("\t");if(3===t.length){const[n,e]=t,a=parseInt(n)||0,o=parseInt(e)||0;l+=a,d+=o,u++}}const p=(0,c.default)(r);if(!p.isValid())continue;if(p.isBefore(n)||p.isAfter(e))continue;o[i]||(o[i]={author:i,email:s,startDate:n,endDate:e,totalCommits:0,totalInsertions:0,totalDeletions:0,totalFiles:0,dailyStats:{}}),o[i].dailyStats[p.format("YYYY-MM-DD")]||(o[i].dailyStats[p.format("YYYY-MM-DD")]={commits:0,insertions:0,deletions:0,files:0});const h=l,m=d,g=u;o[i].totalCommits++,o[i].totalInsertions+=h,o[i].totalDeletions+=m,o[i].totalFiles+=g,o[i].dailyStats[p.format("YYYY-MM-DD")].commits++,o[i].dailyStats[p.format("YYYY-MM-DD")].insertions+=h,o[i].dailyStats[p.format("YYYY-MM-DD")].deletions+=m,o[i].dailyStats[p.format("YYYY-MM-DD")].files+=g}return o}catch(t){throw t}}processCommitStats(t,n,e,a,o){const{hash:i,author:s,email:r,date:l}=t,d=l.clone().startOf("day"),u=c.default.utc(a).startOf("day"),p=c.default.utc(o).endOf("day");if(d.isBefore(u)||d.isAfter(p))return;const h=l.format("YYYY-MM-DD");e[s]||(e[s]={author:s,email:r,startDate:a,endDate:o,totalCommits:0,totalInsertions:0,totalDeletions:0,totalFiles:0,dailyStats:{}}),e[s].dailyStats[h]||(e[s].dailyStats[h]={commits:0,insertions:0,deletions:0,files:0});const m=n.insertions.reduce(((t,n)=>t+n),0),g=n.deletions.reduce(((t,n)=>t+n),0),f=n.insertions.length;e[s].totalCommits++,e[s].totalInsertions+=m,e[s].totalDeletions+=g,e[s].totalFiles+=f,e[s].dailyStats[h].commits++,e[s].dailyStats[h].insertions+=m,e[s].dailyStats[h].deletions+=g,e[s].dailyStats[h].files+=f}parseNumstat(t){const n=t.split("\n");let e=0,a=0,o=0;for(const t of n){if(!t.trim())continue;const[n,i]=t.split("\t");n&&i&&(e+="-"===n?0:parseInt(n,10)||0,a+="-"===i?0:parseInt(i,10)||0,o++)}return{insertions:e,deletions:a,files:o}}}},944:function(t,n,e){var a,o=this&&this.__createBinding||(Object.create?function(t,n,e,a){void 0===a&&(a=e);var o=Object.getOwnPropertyDescriptor(n,e);o&&!("get"in o?!n.__esModule:o.writable||o.configurable)||(o={enumerable:!0,get:function(){return n[e]}}),Object.defineProperty(t,a,o)}:function(t,n,e,a){void 0===a&&(a=e),t[a]=n[e]}),i=this&&this.__setModuleDefault||(Object.create?function(t,n){Object.defineProperty(t,"default",{enumerable:!0,value:n})}:function(t,n){t.default=n}),s=this&&this.__importStar||(a=function(t){return a=Object.getOwnPropertyNames||function(t){var n=[];for(var e in t)Object.prototype.hasOwnProperty.call(t,e)&&(n[n.length]=e);return n},a(t)},function(t){if(t&&t.__esModule)return t;var n={};if(null!=t)for(var e=a(t),s=0;s<e.length;s++)"default"!==e[s]&&o(n,t,e[s]);return i(n,t),n}),r=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(n,"__esModule",{value:!0}),n.ContributionVisualization=void 0;const l=s(e(398)),c=r(e(716));n.ContributionVisualization=class{constructor(t,n){this.context=t,this.disposables=[],this.analyzer=n}dispose(){this.panel?.dispose(),this.disposables.forEach((t=>t.dispose()))}onTimeRangeChange(t){this.timeRangeChangeCallback=t}async update(t){this.panel&&await this.updateVisualization(t)}async updateStats(t){if(!this.panel)return;const n=Object.values(t),e=this.getAllDates(t),a=this.prepareCommitData(n,e),o=this.prepareChangeData(n,e);this.panel?.webview&&this.panel.webview.postMessage({command:"updateData",commitData:a,changeData:o})}async updateVisualization(t){if(!this.panel)return;const n=Object.values(t),e=this.getAllDates(t),a=this.prepareCommitData(n,e),o=this.prepareChangeData(n,e);this.panel&&await this.panel.webview.postMessage({command:"updateData",commitData:a,changeData:o})}async handleTimeRangeChange(t,n,e){try{const a=await this.analyzer.getContributionStats(t,n,e);await this.update(a)}catch(t){console.error("Error updating time range:",t)}}async show(t){console.log("Showing contribution stats:",t),this.panel?this.panel.reveal():(this.panel=l.window.createWebviewPanel("codeActivityStats","Git Stats",l.ViewColumn.One,{enableScripts:!0,retainContextWhenHidden:!0,localResourceRoots:[this.context.extensionUri]}),this.panel.onDidDispose((()=>{this.panel=void 0}),null,this.disposables),this.panel.webview.onDidReceiveMessage((async t=>{"timeRangeChanged"===t.command&&await this.handleTimeRangeChange(t.days,t.startDate,t.endDate)}),void 0,this.disposables));const n=this.getAllDates(t);console.log("Generated dates:",n);const e=this.prepareCommitData(Object.values(t),n);console.log("Prepared commit data:",e);const a=this.prepareChangeData(Object.values(t),n);console.log("Prepared change data:",a),this.panel&&(this.panel.webview.html=this.getWebviewContent(t))}getWebviewContent(t){const n=Object.values(t),e=this.getAllDates(t),a=this.prepareCommitData(n,e),o=this.prepareChangeData(n,e);return'<!DOCTYPE html>\n        <html>\n        <head>\n            <title>Git Stats</title>\n            <script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.0/dist/chart.umd.min.js"><\/script>\n            <style>\n                :root {\n                    --vscode-dropdown-background: var(--vscode-input-background);\n                    --vscode-dropdown-foreground: var(--vscode-input-foreground);\n                    --vscode-dropdown-border: var(--vscode-input-border);\n                }\n                .container {\n                    padding: 20px;\n                    max-width: 1200px;\n                    margin: 0 auto;\n                    font-family: -apple-system, BlinkMacSystemFont, \'Segoe UI\', Roboto, Oxygen, Ubuntu, Cantarell, \'Open Sans\', \'Helvetica Neue\', sans-serif;\n                }\n                .header {\n                    display: flex;\n                    justify-content: space-between;\n                    align-items: center;\n                    margin-bottom: 20px;\n                }\n                .time-range-selector {\n                    display: flex;\n                    align-items: center;\n                    gap: 10px;\n                    padding: 4px 8px;\n                    border-radius: 4px;\n                }\n                .date-picker {\n                    background-color: var(--vscode-dropdown-background);\n                    color: var(--vscode-dropdown-foreground);\n                    border: 1px solid var(--vscode-dropdown-border);\n                    padding: 4px 8px;\n                    border-radius: 4px;\n                    font-size: 13px;\n                }\n                .date-separator {\n                    color: var(--vscode-foreground);\n                    margin: 0 4px;\n                }\n                .chart-container {\n                    position: relative;\n                    height: 400px;\n                    margin-bottom: 20px;\n                    background-color: var(--vscode-editor-background);\n                    padding: 15px;\n                    border-radius: 8px;\n                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                }\n                .chart-title {\n                    margin-bottom: 15px;\n                    color: var(--vscode-foreground);\n                    font-size: 18px;\n                    font-weight: 500;\n                }\n                .summary-table {\n                    width: 100%;\n                    border-collapse: collapse;\n                    margin-top: 20px;\n                    margin-bottom: 30px;\n                    background-color: var(--vscode-editor-background);\n                    border-radius: 8px;\n                    overflow: hidden;\n                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n                }\n                .summary-table th, .summary-table td {\n                    padding: 12px;\n                    text-align: left;\n                    border: 1px solid var(--vscode-dropdown-border);\n                }\n                .summary-table th {\n                    background-color: var(--vscode-dropdown-background);\n                    font-weight: 500;\n                }\n                .summary-table tr:hover {\n                    background-color: var(--vscode-list-hoverBackground);\n                }\n                .pie-chart-container {\n                    position: absolute;\n                    top: 100px;\n                    left: 100px;\n                    width: 150px;  /* 调整为150px */\n                    height: 150px;  /* 调整为150px */\n                    background-color: rgba(255, 255, 255, 0.05);\n                    border-radius: 8px;\n                    cursor: move;\n                    z-index: 1000;\n                    backdrop-filter: blur(3px);\n                    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.08);\n                }\n                .pie-chart-container:hover {\n                    box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);\n                }\n                select {\n                    background-color: var(--vscode-dropdown-background);\n                    color: var(--vscode-dropdown-foreground);\n                    border: 1px solid var(--vscode-dropdown-border);\n                    padding: 4px 8px;\n                    border-radius: 4px;\n                    font-size: 13px;\n                }\n                select:focus {\n                    outline: none;\n                    border-color: var(--vscode-focusBorder);\n                }\n                h1 {\n                    margin: 0;\n                    font-size: 24px;\n                    color: var(--vscode-foreground);\n                }\n            </style>\n        </head>\n        <body>\n            <div class="container">\n                <div class="header">\n                    <h1>Git Stats</h1>\n                    <div class="time-range-selector">\n                        <input type="date" id="startDate" class="date-picker" title="Start Date">\n                        <span class="date-separator">to</span>\n                        <input type="date" id="endDate" class="date-picker" title="End Date">\n                        <select id="timeRange">\n                            <option value="7" selected>Last Week</option>\n                            <option value="30">Last Month</option>\n                            <option value="90">Last 3 Months</option>\n                            <option value="180">Last 6 Months</option>\n                            <option value="365">Last Year</option>\n                            <option value="custom">Custom Range</option>\n                        </select>\n                    </div>\n                </div>\n                <div class="chart-container">\n                    <div class="pie-chart-container">\n                        <canvas id="pieChart"></canvas>\n                    </div>\n                    <h2 class="chart-title">Commits</h2>\n                    <canvas id="commitChart"></canvas>\n                </div>\n                <div class="chart-container">\n                    <div class="pie-chart-container">\n                        <canvas id="linesChangedPieChart"></canvas>\n                    </div>\n                    <h2 class="chart-title">Lines Changed</h2>\n                    <canvas id="changeChart"></canvas>\n                </div>\n\n                <h2>Summary</h2>\n                <table class="summary-table">\n                    <tr>\n                        <th>Author</th>\n                        <th>Total Commits</th>\n                        <th>Lines Added</th>\n                        <th>Lines Deleted</th>\n                        <th>Files Changed</th>\n                    </tr>\n                    '+n.map((t=>"\n                        <tr>\n                            <td>"+t.author+"</td>\n                            <td>"+t.totalCommits+"</td>\n                            <td>"+t.totalInsertions+"</td>\n                            <td>"+t.totalDeletions+"</td>\n                            <td>"+t.totalFiles+"</td>\n                        </tr>\n                    ")).join("")+"\n                </table>\n            </div>\n            <script>\n                // 拖动功能\n                const pieChartContainers = document.querySelectorAll('.pie-chart-container');\n                let isDragging = false;\n                let currentX;\n                let currentY;\n                let initialX;\n                let initialY;\n                let activePieChart = null;\n\n                pieChartContainers.forEach(container => {\n                    container.addEventListener('mousedown', (e) => {\n                        activePieChart = container;\n                        dragStart(e);\n                    });\n                });\n                \n                document.addEventListener('mousemove', drag);\n                document.addEventListener('mouseup', dragEnd);\n\n                function dragStart(e) {\n                    if (!activePieChart) return;\n                    initialX = e.clientX - activePieChart.offsetLeft;\n                    initialY = e.clientY - activePieChart.offsetTop;\n                    isDragging = true;\n                }\n\n                function drag(e) {\n                    if (isDragging && activePieChart) {\n                        e.preventDefault();\n                        currentX = e.clientX - initialX;\n                        currentY = e.clientY - initialY;\n                        \n                        // 限制在图表区域内\n                        const container = activePieChart.closest('.chart-container');\n                        const maxX = container.offsetWidth - activePieChart.offsetWidth;\n                        const maxY = container.offsetHeight - activePieChart.offsetHeight;\n                        \n                        currentX = Math.max(0, Math.min(currentX, maxX));\n                        currentY = Math.max(0, Math.min(currentY, maxY));\n\n                        activePieChart.style.left = currentX + 'px';\n                        activePieChart.style.top = currentY + 'px';\n                    }\n                }\n\n                function dragEnd() {\n                    isDragging = false;\n                    activePieChart = null;\n                }\n\n                const vscode = acquireVsCodeApi();\n                let commitChart, changeChart, pieChart, linesChangedPieChart;\n\n                // 创建饼图\n                function createPieChart(data) {\n                    const ctx = document.getElementById('pieChart');\n                    const totalCommits = data.datasets.reduce((acc, dataset) => {\n                        return acc + dataset.data.reduce((sum, val) => sum + val, 0);\n                    }, 0);\n                    \n                    const pieData = {\n                        labels: data.datasets.map(d => d.label),\n                        datasets: [{\n                            data: data.datasets.map(d => \n                                d.data.reduce((sum, val) => sum + val, 0)\n                            ),\n                            backgroundColor: data.datasets.map(d => d.backgroundColor),\n                            borderColor: 'rgba(0, 0, 0, 0.1)',\n                            borderWidth: 1\n                        }]\n                    };\n\n                    if (pieChart) {\n                        pieChart.destroy();\n                    }\n\n                    pieChart = new Chart(ctx, {\n                        type: 'pie',\n                        data: pieData,\n                        options: {\n                            responsive: true,\n                            maintainAspectRatio: false,\n                            plugins: {\n                                legend: {\n                                    display: false\n                                },\n                                tooltip: {\n                                    callbacks: {\n                                        label: function(context) {\n                                            const value = context.raw;\n                                            const percentage = ((value / totalCommits) * 100).toFixed(1);\n                                            return [\n                                                context.label,\n                                                'Commits: ' + value,\n                                                'Percentage: ' + percentage + '%'\n                                            ];\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n\n                // 创建Lines Changed饼图\n                function createLinesChangedPieChart(data) {\n                    const ctx = document.getElementById('linesChangedPieChart');\n                    const totalLines = data.datasets.reduce((acc, dataset) => {\n                        return acc + dataset.data.reduce((sum, val) => sum + val, 0);\n                    }, 0);\n                    \n                    const pieData = {\n                        labels: data.datasets.map(d => d.label),\n                        datasets: [{\n                            data: data.datasets.map(d => \n                                d.data.reduce((sum, val) => sum + val, 0)\n                            ),\n                            backgroundColor: data.datasets.map(d => d.backgroundColor),\n                            borderColor: 'rgba(0, 0, 0, 0.1)',\n                            borderWidth: 1\n                        }]\n                    };\n\n                    if (linesChangedPieChart) {\n                        linesChangedPieChart.destroy();\n                    }\n\n                    linesChangedPieChart = new Chart(ctx, {\n                        type: 'pie',\n                        data: pieData,\n                        options: {\n                            responsive: true,\n                            maintainAspectRatio: false,\n                            plugins: {\n                                legend: {\n                                    display: false\n                                },\n                                tooltip: {\n                                    callbacks: {\n                                        label: function(context) {\n                                            const value = context.raw;\n                                            const percentage = ((value / totalLines) * 100).toFixed(1);\n                                            return [\n                                                context.label,\n                                                'Lines Changed: ' + value,\n                                                'Percentage: ' + percentage + '%'\n                                            ];\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    });\n                }\n\n                // 更新现有的图表创建代码\n                function createCommitChart(data) {\n                    const ctx = document.getElementById('commitChart');\n                    if (commitChart) {\n                        commitChart.destroy();\n                    }\n                    commitChart = new Chart(ctx, {\n                        type: 'line',\n                        data: data,\n                        options: {\n                            responsive: true,\n                            maintainAspectRatio: false,\n                            interaction: {\n                                intersect: false,\n                                mode: 'index'\n                            },\n                            plugins: {\n                                legend: {\n                                    position: 'top',\n                                },\n                                tooltip: {\n                                    callbacks: {\n                                        label: function(context) {\n                                            return context.dataset.label + ': ' + context.raw + ' commits';\n                                        }\n                                    }\n                                }\n                            },\n                            elements: {\n                                line: {\n                                    tension: 0.4,\n                                    cubicInterpolationMode: 'monotone'\n                                }\n                            },\n                            scales: {\n                                x: {\n                                    title: {\n                                        display: true,\n                                        text: 'Date'\n                                    },\n                                    ticks: {\n                                        maxRotation: 45,\n                                        minRotation: 45\n                                    }\n                                },\n                                y: {\n                                    beginAtZero: true,\n                                    title: {\n                                        display: true,\n                                        text: 'Number of Commits'\n                                    }\n                                }\n                            }\n                        }\n                    });\n\n                    // 创建饼图\n                    createPieChart(data);\n                }\n\n                // 创建变更图表\n                function createChangeChart(data) {\n                    const ctx = document.getElementById('changeChart');\n                    if (changeChart) {\n                        changeChart.destroy();\n                    }\n                    changeChart = new Chart(ctx, {\n                        type: 'bar',\n                        data: data,\n                        options: {\n                            responsive: true,\n                            maintainAspectRatio: false,\n                            interaction: {\n                                intersect: false,\n                                mode: 'index'\n                            },\n                            plugins: {\n                                legend: {\n                                    position: 'top',\n                                },\n                                tooltip: {\n                                    callbacks: {\n                                        label: function(context) {\n                                            return context.dataset.label + ': ' + context.raw + ' lines changed';\n                                        }\n                                    }\n                                }\n                            },\n                            scales: {\n                                x: {\n                                    title: {\n                                        display: true,\n                                        text: 'Date'\n                                    },\n                                    ticks: {\n                                        maxRotation: 45,\n                                        minRotation: 45\n                                    }\n                                },\n                                y: {\n                                    beginAtZero: true,\n                                    title: {\n                                        display: true,\n                                        text: 'Lines Changed'\n                                    }\n                                }\n                            }\n                        }\n                    });\n                    \n                    // 创建Lines Changed饼图\n                    createLinesChangedPieChart(data);\n                }\n\n                // 解析数据\n                const commitData = "+JSON.stringify(a)+";\n                const changeData = "+JSON.stringify(o)+";\n\n                console.log('Commit data:', commitData);\n                console.log('Change data:', changeData);\n\n                // 创建提交图表\n                createCommitChart(commitData);\n\n                // 创建变更图表\n                createChangeChart(changeData);\n\n                // 监听来自 VS Code 的消息\n                window.addEventListener('message', event => {\n                    const message = event.data;\n                    switch (message.command) {\n                        case 'updateData':\n                            // 更新所有图表\n                            if (commitChart) {\n                                commitChart.data = message.commitData;\n                                commitChart.update();\n                                // 更新commits饼图\n                                createPieChart(message.commitData);\n                            }\n                            if (changeChart) {\n                                changeChart.data = message.changeData;\n                                changeChart.update();\n                                // 更新lines changed饼图\n                                createLinesChangedPieChart(message.changeData);\n                            }\n                            break;\n                    }\n                });\n\n                // 时间范围选择处理\n                const timeRangeSelect = document.getElementById('timeRange');\n                const startDateInput = document.getElementById('startDate');\n                const endDateInput = document.getElementById('endDate');\n\n                // 设置默认日期范围（最近一周）\n                const endDate = new Date();\n                const startDate = new Date();\n                startDate.setDate(endDate.getDate() - 6); // Last 7 days (including today)\n                \n                startDateInput.value = startDate.toISOString().split('T')[0];\n                endDateInput.value = endDate.toISOString().split('T')[0];\n\n                // 时间范围选择变化处理\n                timeRangeSelect.addEventListener('change', function(e) {\n                    const value = this.value;\n                    const today = new Date();\n                    let start = new Date();\n\n                    if (value === 'custom') {\n                        return; // 保持当前选择的日期不变\n                    }\n\n                    const days = parseInt(value);\n                    start.setDate(today.getDate() - (days - 1)); // -1是因为包含今天\n\n                    startDateInput.value = start.toISOString().split('T')[0];\n                    endDateInput.value = today.toISOString().split('T')[0];\n\n                    // 通知扩展时间范围已更改\n                    vscode.postMessage({\n                        command: 'timeRangeChanged',\n                        days: days\n                    });\n                });\n\n                // 日期选择变化处理\n                function handleDateChange() {\n                    const start = new Date(startDateInput.value);\n                    const end = new Date(endDateInput.value);\n                    \n                    if (start && end && start <= end) {\n                        // 计算天数差异\n                        const diffTime = Math.abs(end - start);\n                        const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)) + 1; // +1 包含开始日期\n                        \n                        // 设置下拉框为custom\n                        timeRangeSelect.value = 'custom';\n                        \n                        // 通知扩展时间范围已更改\n                        vscode.postMessage({\n                            command: 'timeRangeChanged',\n                            days: diffDays,\n                            startDate: startDateInput.value,\n                            endDate: endDateInput.value\n                        });\n                    }\n                }\n\n                startDateInput.addEventListener('change', handleDateChange);\n                endDateInput.addEventListener('change', handleDateChange);\n\n                // 初始化时触发一次时间范围变化\n                timeRangeSelect.dispatchEvent(new Event('change'));\n            <\/script>\n        </body>\n        </html>"}getAllDates(t){const n=c.default.utc(Object.values(t)[0]?.startDate),e=c.default.utc(Object.values(t)[0]?.endDate),a=[];console.log("Date range:",n.format(),"to",e.format());let o=n.clone();for(;o.isSameOrBefore(e);)a.push(o.format("YYYY-MM-DD")),o.add(1,"day");return a}prepareCommitData(t,n){const e=(t=t.filter((t=>!t.author.toLowerCase().includes("stash")))).map(((t,e)=>({label:t.author,data:n.map((n=>t.dailyStats[n]?.commits||0)),borderColor:this.getColor(e),backgroundColor:this.getColor(e),fill:!1,tension:.4,cubicInterpolationMode:"monotone"})));return{labels:n,datasets:e}}prepareChangeData(t,n){const e=(t=t.filter((t=>!t.author.toLowerCase().includes("stash")))).map(((t,e)=>({label:t.author,data:n.map((n=>{const e=t.dailyStats[n];return e?e.insertions+e.deletions:0})),backgroundColor:this.getColor(e),stack:"combined"})));return{labels:n,datasets:e}}getColor(t){const n=["#2196F3","#4CAF50","#F44336","#FFC107","#9C27B0","#00BCD4","#FF9800","#795548","#607D8B","#E91E63"];return n[t%n.length]}}},716:t=>{t.exports=require("moment")},807:t=>{t.exports=require("simple-git")},398:t=>{t.exports=require("vscode")},896:t=>{t.exports=require("fs")},928:t=>{t.exports=require("path")}},n={},e=function e(a){var o=n[a];if(void 0!==o)return o.exports;var i=n[a]={exports:{}};return t[a].call(i.exports,i,i.exports,e),i.exports}(265);module.exports=e})();